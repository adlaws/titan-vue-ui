const PERLIN_PERMUTATION = [
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,
    117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,
    165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,
    105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,
    187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,
    64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,
    47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,
    153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,
    112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,
    145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,
    50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,
    66,215,61,156,180,
    // and repeat...
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,
    117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,
    165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,
    105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,
    187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,
    64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,
    47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,
    153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,
    112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,
    145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,
    50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,
    66,215,61,156,180,
];

export class Perlin
{
    /**
     * Perlin noise function
     *     ref: https://eev.ee/blog/2016/05/29/perlin-noise/
     *          https://gist.github.com/indy/296676
     * @param x the x coordinate
     * @param y the y coordinate
     * @param z the z coordinate
     * @return the Perlin noise value at that point (between 0 and 1)
     */
    static noise( x=0, y=0, z=0 )
    {
        // find unit cube that contains point
        const fX = Math.floor( x );
        const fY = Math.floor( y );
        const fZ = Math.floor( z );

        const X = fX & 255;
        const Y = fY & 255;
        const Z = fZ & 255;

        // find relative X,Y,Z of point in cube
        x -= fX;
        y -= fY;
        z -= fZ;

        // compute fade curves for each of X, Y and Z
        const u = Perlin._fade( x );
        const v = Perlin._fade( y );
        const w = Perlin._fade( z );

        const p = PERLIN_PERMUTATION;
        // hash coordinates for the 8 cube corners
        const A  = p[X] + Y;
        const B  = p[X + 1] + Y;
        const AA = p[A] + Z;
        const AB = p[A + 1] + Z;
        const BA = p[B] + Z;
        const BB = p[B + 1] + Z;

        // add blended results from 8 corners of the cube
        return Perlin._lerp( w,
            Perlin._lerp( v,
                Perlin._lerp( u,
                    Perlin._grad( p[AA], x, y, z ),
                    Perlin._grad( p[BA], x - 1, y, z )
                ),
                Perlin._lerp( u,
                    Perlin._grad( p[AB], x, y - 1, z ),
                    Perlin._grad( p[BB], x - 1, y - 1, z )
                )
            ),
            Perlin._lerp( v,
                Perlin._lerp( u,
                    Perlin._grad( p[AA + 1], x, y, z - 1 ),
                    Perlin._grad( p[BA + 1], x - 1, y, z - 1 )
                ),
                Perlin._lerp( u,
                    Perlin._grad( p[AB + 1], x, y - 1, z - 1 ),
                    Perlin._grad( p[BB + 1], x - 1, y - 1, z - 1 )
                )
            )
        );
    }

    static _fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }
    static _lerp(t, a, b) { return a + t * (b - a); }
    static _grad(hash, x, y, z)
    {
        // convert low 4 bits of hash code into 12 gradient directions
        const h = hash & 15;
        const u = h<8 ? x : y;
        const v = h<4 ? y : ((h===12||h===14) ? x : z);
        return ((h&1) === 0 ? u : -u) + ((h&2) === 0 ? v : -v);
    }
}
